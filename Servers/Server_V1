#include <ESP8266WiFi.h>
#include "ESPAsyncWebServer.h"

const char* ssid = "Hidden Network"; //Sneaky
const char* password = "Project GooseHonk"; //The password to the network

AsyncWebServer server(80);

unsigned long startAudio, pastMillis;
int file, volume;
int seconds, minutes, hours, days, years = 2022;

void setup(){
  WiFi.softAP(ssid, password);

  server.on("/client", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", getData().c_str());
  });
  server.on("/trigger", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", trigger().c_str());
  });
  server.on("/time", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", internalTime(0).c_str());
  });

  
  server.on("/adjust/daysp", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", internalTime(1).c_str());
  });
  server.on("/adjust/daysm", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", internalTime(2).c_str());
  });
  
  server.on("/adjust/hoursp", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", internalTime(3).c_str());
  });
  server.on("/adjust/hoursm", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", internalTime(4).c_str());
  });

  server.on("/adjust/minutesp", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", internalTime(5).c_str());
  });
  server.on("/adjust/minutesm", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", internalTime(6).c_str());
  });

  server.on("/adjust/secondsp", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", internalTime(7).c_str());
  });
  server.on("/adjust/secondsm", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/plain", internalTime(8).c_str());
  });
  
  bool status;
  server.begin();
}

void loop(){
  ydhms();
}

void ydhms(){
  unsigned long temporaryMillis = millis();
  
  if (temporaryMillis%1000 == 0&&temporaryMillis != pastMillis){
    pastMillis = temporaryMillis;
    seconds++;
    
    if (seconds >= 60){
      seconds = 0;
      minutes++;
  
      if (minutes >= 60){
        minutes = 0;
        hours++;
    
        if (hours >= 24){
          hours = 0;
          days++;
        }

        if (days >= 365&&hours >= 6){
          days = 0;
          years++;
        }
      }
    }
  }
}

String trigger(){
  file = round(random(1,10));
  volume = round(random(1,30));
  startAudio = millis()+5000;
  return String(file-1);
}

String internalTime(byte adjust){
  String output;

  output+=years;output+=".";output+=days;output+=".";output+=hours;output+=":";output+=minutes;output+=":";output+=seconds;

  switch (adjust){
    case 1: 
      days++;
    break;
    case 2: 
      days--;
    break;
    case 3: 
      hours++;
    break;
    case 4: 
      hours--;
    break;
    case 5: 
      minutes++;
    break;
    case 6: 
      minutes--;
    break;
    case 7: 
      seconds++;
    break;
    case 8: 
      seconds--;
    break;
  }
  
  return output;
}

String getData(){
  String output;
  
  output += ",";
  output += String(file);
  output += ",";
  output += String(constrain((startAudio-millis()), 0, 4294967295));
  output += ",";
  output += String(volume);
  output += ",";
  return output;
}

